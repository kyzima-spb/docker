#!/usr/bin/env bash
#
# Commands:
#
# * dump - Saves the given or all databases to a file.
# * dump-db - Saves the given database to a file.
# * restore - Restores all databases from the file.
# * restore-db - Restores database from the file.
# * shell - Access to the MySQL server console.
#
# Placeholders:
#
# * COMPOSE_COMMAND - The name of the docker compose command.
# * SERVICE_NAME - Service name in docker-compose.
# * DATE_FORMAT - The date format used by the date command to generate filenames.
# * ROOT_PASSWORD_VAR - The name of the environment variable with the root password.
# * USER_PASSWORD_VAR - The name of the environment variable with the user password.
# 
# Environment variables:
# 
# * MYSQL_USER - Force the given username to be used.
# * MYSQL_PASSWORD - Force the given user password to be used.
#
# Get script:
# 
# wget -qO- https://kyzima-spb.github.io/docker-useful/mysql.sh.tmpl | \
# sed \
#     -e 's/%%COMPOSE_COMMAND%%/docker compose/' \
#     -e 's/%%SERVICE_NAME%%/mysql/' \
#     -e 's/%%DATE_FORMAT%%/%F_%k%M%S/' \
#     -e 's/%%ROOT_PASSWORD_VAR%%/MYSQL_ROOT_PASSWORD_FILE/' \
#     -e 's/%%USER_PASSWORD_VAR%%/MYSQL_PASSWORD_FILE/' \
#     > mysql.sh \
# && chmod +x mysql.sh


makeCredentials()
{
    local rootPasswordVar='%%ROOT_PASSWORD_VAR%%'
    local userPasswordVar='%%USER_PASSWORD_VAR%%'
    local user="${MYSQL_USER:-\$MYSQL_USER}"
    
    if [[ "$user" == 'root' ]]; then
        local default="$(passwordValue "$rootPasswordVar")"
    else
        local default="$(passwordValue "$userPasswordVar")"
    fi
    
    local password="${MYSQL_PASSWORD:-$default}"

    echo "-u\"$user\" -p\"$password\""
}


passwordValue()
{
    if [[ "$1" == *_FILE ]]; then
        echo "\$(cat \$$1)"
    else
        echo "\$$1"
    fi
}


restore()
{
    local input="$1"
    local db="$2"
    local args="$CREDENTIALS"
    
    if [[ -z $input ]]; then
        echo "Usage $0 restore FILE" >&2
        echo "Usage $0 restore-db FILE [DB]" >&2
        exit 1
    fi
    
    if [[ ! -z $db ]]; then
        args+=" -D $db"
    fi
    
    %%COMPOSE_COMMAND%% exec -T "$SERVICE_NAME" \
        sh -c "exec mysql $args" < "$input"
}


SERVICE_NAME='%%SERVICE_NAME%%'
DATE_FORMAT='%%DATE_FORMAT%%'
CREDENTIALS="$(makeCredentials)"


case "$1" in
    'dump')
        databases=${@:3:$#}
        output="${2:-.}/$(date -u +$DATE_FORMAT)"
        args="$CREDENTIALS"
        
        if [[ -z $databases ]]; then
            output+="_full.sql"
            args+=' --all-databases'
        else
            output+="_(${databases// /,}).sql"
            args+=" --databases $databases"
        fi
        
        echo "Save the databases dump to an $output"

        %%COMPOSE_COMMAND%% "$SERVICE_NAME" \
            sh -c "exec mysqldump $args" > "$output"
        ;;
    'dump-db')
        db="${3:-\$MYSQL_DATABASE}"
        output="${2:-.}/$(date -u +$DATE_FORMAT)_(${3:-default}).sql"
        echo "Save the databases dump to an $output"
        %%COMPOSE_COMMAND%% exec "$SERVICE_NAME" \
            sh -c "exec mysqldump $CREDENTIALS \"$db\"" > "$output"
        ;;
    'restore-db')
        restore "$2" "${3:-\$MYSQL_DATABASE}" ;;
    'restore')
        restore "$2" ;;
    'shell')
        %%COMPOSE_COMMAND%% exec "$SERVICE_NAME" \
            sh -c "exec mysql $CREDENTIALS -D \"$MYSQL_DATABASE\""
        ;;
    *)
        echo "Usage: $0 {dump,dump-db,restore,restore-db,shell}" >&2
        exit 1
esac
